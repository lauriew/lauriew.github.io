@article{williams2025research,
	title         = {Research Directions in Software Supply Chain Security},
	author        = {Williams, Laurie and Benedetti, Giacomo and Hamer, Sivana and Paramitha, Ranindya and Rahman, Imranur and Tamanna, Mahzabin and Tystahl, Greg and Zahan, Nusrat and Morrison, Patrick and Acar, Yasemin and Cukier, Michel and K\"{a}stner, Christian and Kapravelos, Alexandros and Wermke, Dominik and Enck, William},
	year          = {2025},
	month         = may,
	journal       = {ACM Trans. Softw. Eng. Methodol.},
	publisher     = {Association for Computing Machinery},
	address       = {New York, NY, USA},
	volume        = {34},
	number        = {5},
	doi           = {10.1145/3714464},
	issn          = {1049-331X},
	url           = {https://doi.org/10.1145/3714464},
	issue_date    = {June 2025},
	articleno     = {146},
	numpages      = {38},
	keywords      = {Software security, Software supply chain security, Open source security},
}

@article{10.1007/s10664-025-10621-5,
author = {Seth, Aishwarya and Bhattacharya, Saikath and Elder, Sarah and Zahan, Nusrat and Williams, Laurie},
title = {Comparing effectiveness and efficiency of Interactive Application Security Testing (IAST) and Runtime Application Self-Protection (RASP) tools in a large java-based system},
year = {2025},
issue_date = {Feb 2025},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {30},
number = {3},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-025-10621-5},
doi = {10.1007/s10664-025-10621-5},
journal = {Empirical Softw. Engg.},
month = feb,
numpages = {27},
keywords = {Vulnerability management, Web application security, Security analysis tools, Vulnerability scanners, Interactive application security testing, Runtime application self-protection}
}

@article{10.1145/3648610,
author = {Elder, Sarah and Rahman, Md Rayhanur and Fringer, Gage and Kapoor, Kunal and Williams, Laurie},
title = {A Survey on Software Vulnerability Exploitability Assessment},
year = {2024},
issue_date = {August 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {56},
number = {8},
issn = {0360-0300},
url = {https://doi.org/10.1145/3648610},
doi = {10.1145/3648610},
abstract = {Knowing the exploitability and severity of software vulnerabilities helps practitioners prioritize vulnerability mitigation efforts. Researchers have proposed and evaluated many different exploitability assessment methods. The goal of this research is to assist practitioners and researchers in understanding existing methods for assessing vulnerability exploitability through a survey of exploitability assessment literature. We identify three exploitability assessment approaches: assessments based on original, manual Common Vulnerability Scoring System, automated Deterministic assessments, and automated Probabilistic assessments. Other than the original Common Vulnerability Scoring System, the two most common sub-categories are Deterministic, Program State based, and Probabilistic learning model assessments.},
journal = {ACM Comput. Surv.},
month = apr,
articleno = {205},
numpages = {41},
keywords = {Exploitability, software vulnerability}
}

@article{10.1145/3672555,
author = {Mahdavi-Hezaveh, Rezvan and Fatima, Sameeha and Williams, Laurie},
title = {Paving a Path for a Combined Family of Feature Toggle and Configuration Option Research},
year = {2024},
issue_date = {September 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {7},
issn = {1049-331X},
url = {https://doi.org/10.1145/3672555},
doi = {10.1145/3672555},
abstract = {Feature toggles and configuration options are techniques to include or exclude functionality in software. The research contributions to these two techniques have most often been focused on either one of them. However, focusing on the similarities of these two techniques and the use of a common terminology may enable a combined family of research on software configuration (a term we use to encompass both techniques) and prevent duplication of effort. The goal of this study is to aid researchers in conducting a family of research on software configuration by extending an existing model of software configuration that provides a common terminology for feature toggles and configuration options in research studies. We started with Siegmund et al.’s Model of Software Configuration (MSC), which was developed based on configuration option-related resources. We extend the MSC by qualitative analysis of feature toggle-related resources. From our analysis, we proposed MSCv2 and evaluated it through its application on publications and an industrial system. Our results indicate researchers studying the same system may provide different definitions of software configuration in publications, similar research questions may be answered repeatedly because of a lack of a clear definition of software configuration, and having an MSC may enable generalized research on this family of research.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = sep,
articleno = {172},
numpages = {27},
keywords = {Feature toggle, configuration option, software configuration, software engineering}
}

@article{10.1109/TSE.2023.3319509,
author = {Imtiaz, Nasif and Williams, Laurie},
title = {Are Your Dependencies Code Reviewed?: Measuring Code Review Coverage in Dependency Updates},
year = {2023},
issue_date = {Nov. 2023},
publisher = {IEEE Press},
volume = {49},
number = {11},
issn = {0098-5589},
url = {https://doi.org/10.1109/TSE.2023.3319509},
doi = {10.1109/TSE.2023.3319509},
abstract = {As modern software extensively uses free open source packages as dependencies, developers have to regularly pull in new third-party code through frequent updates. However, without a proper review of every incoming change, vulnerable and malicious code can sneak into the codebase through these dependencies. The goal of this study is to aid developers in securely accepting dependency updates by measuring if the code changes in an update have passed through a code review process. We implement Depdive, an update audit tool for packages in Crates.io, npm, PyPI, and RubyGems registry. Depdive first (i) identifies the files and the code changes in an update that cannot be traced back to the package's source repository, i.e., <italic>phantom artifacts</italic>; and then (ii) measures what portion of changes in the update, excluding the phantom artifacts, has passed through a code review process, i.e., <italic>code review coverage</italic>. Using Depdive, we present an empirical study across the latest ten updates of the most downloaded 1000 packages in each of the four registries. We further evaluated our results through a maintainer agreement survey. We find that phantom artifacts are not uncommon in the updates (20.1\% of the analyzed updates had at least one phantom file). The phantoms can appear either due to legitimate reasons, such as in the case of programmatically generated files, or from accidental inclusion, such as in the case of files that are ignored in the repository. Regarding code review coverage (<italic>CRC</italic>), we find the updates are typically only partially code-reviewed (52.5\% of the time). Further, only 9.0\% of the packages had all their updates in our data set fully code-reviewed, indicating that even the most used packages can introduce non-reviewed code in the software supply chain. We also observe that updates either tend to have high <italic>CRC</italic> or low <italic>CRC</italic>, suggesting that packages at the opposite end of the spectrum may require a separate set of treatments.},
journal = {IEEE Trans. Softw. Eng.},
month = nov,
pages = {4932–4945},
numpages = {14}
}

@ARTICLE{10163720,
  author={Zahan, Nusrat and Kanakiya, Parth and Hambleton, Brian and Shohan, Shohanuzzaman and Williams, Laurie},
  journal={IEEE Security & Privacy}, 
  title={OpenSSF Scorecard: On the Path Toward Ecosystem-Wide Automated Security Metrics}, 
  year={2023},
  volume={21},
  number={6},
  pages={76-88},
  keywords={Security;Software measurement;Software development management;Open source software;Ecosystems;Task analysis;Standards},
  doi={10.1109/MSEC.2023.3279773}
}

@article{10.1145/3571726,
author = {Rahman, Md Rayhanur and Hezaveh, Rezvan Mahdavi and Williams, Laurie},
title = {What Are the Attackers Doing Now? Automating Cyberthreat Intelligence Extraction from Text on Pace with the Changing Threat Landscape: A Survey},
year = {2023},
issue_date = {December 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {55},
number = {12},
issn = {0360-0300},
url = {https://doi.org/10.1145/3571726},
doi = {10.1145/3571726},
abstract = {Cybersecurity researchers have contributed to the automated extraction of CTI from textual sources, such as threat reports and online articles describing cyberattack strategies, procedures, and tools. The goal of this article is to aid cybersecurity researchers in understanding the current techniques used for cyberthreat intelligence extraction from text through a survey of relevant studies in the literature. Our work finds 11 types of extraction purposes and 7 types of textual sources for CTI extraction. We observe the technical challenges associated with obtaining available clean and labeled data for replication, validation, and further extension of the studies. We advocate for building upon the current CTI extraction work to help cybersecurity practitioners with proactive decision-making such as in threat prioritization and mitigation strategy formulation to utilize knowledge from past cybersecurity incidents.},
journal = {ACM Comput. Surv.},
month = mar,
articleno = {241},
numpages = {36},
keywords = {Cyberthreat intelligence, CTI extraction, CTI mining, IoC extraction, TTPs extraction, attack pattern extraction, threat reports, tactical threat intelligence, technical threat intelligence}
}

@ARTICLE{9792380,
  author={Imtiaz, Nasif and Khanom, Aniqa and Williams, Laurie},
  journal={IEEE Transactions on Software Engineering}, 
  title={Open or Sneaky? Fast or Slow? Light or Heavy?: Investigating Security Releases of Open Source Packages}, 
  year={2023},
  volume={49},
  number={4},
  pages={1540-1560},
  keywords={Security;Codes;Delays;Ecosystems;Databases;Semantics;Supply chains;Empirical study;open source security;supply chain security},
  doi={10.1109/TSE.2022.3181010}
}

@article{10.1007/s10664-022-10179-6,
author = {Elder, Sarah and Zahan, Nusrat and Shu, Rui and Metro, Monica and Kozarev, Valeri and Menzies, Tim and Williams, Laurie},
title = {Do I really need all this work to find vulnerabilities? An empirical case study comparing vulnerability detection techniques on a Java application},
year = {2022},
issue_date = {Nov 2022},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {27},
number = {6},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-022-10179-6},
doi = {10.1007/s10664-022-10179-6},
journal = {Empirical Softw. Engg.},
month = nov,
numpages = {78},
keywords = {Vulnerability Scanners, Penetration Testing, Web Application Security, Vulnerability Management}
}

@ARTICLE{9732894,
author={Weir, Charles and Migues, Sammy and Williams, Laurie},
journal={ IEEE Security \& Privacy },
title={Exploring the Shift in Security Responsibility},
year={2022},
volume={20},
number={06},
ISSN={1558-4046},
pages={8-17},
abstract={ The Building Security in Maturity Model survey has been tracking software security activity adoption in 211 companies over 12 years. This article explores how organizations should adapt to the latest security challenges. },
keywords={Security;Statistics;Companies;Tracking;Data models;Software measurement},
doi={10.1109/MSEC.2022.3150238},
url = {https://doi.ieeecomputersociety.org/10.1109/MSEC.2022.3150238},
publisher={IEEE Computer Society},
address={Los Alamitos, CA, USA},
month=nov}






